{"version":3,"sources":["../src/service/email.service.ts"],"names":[],"mappings":"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","file":"email.service.js","sourcesContent":["import { HttpException, Injectable } from \"@nestjs/common\";\nimport { EmailModuleEntity } from \"../entity/emailModule.entity\";\nimport { render } from \"ejs\";\nimport { createTransport } from \"nodemailer\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { EmailConfigureEntity } from \"../entity/emailConfigure.entity\";\nimport { EmailLogEntity } from \"../entity/emailLog.entity\";\nimport { async } from \"rxjs/internal/scheduler/async\";\n\nlet code;\nlet message;\n@Injectable()\nexport class EmailService {\n constructor(\n   @InjectRepository(EmailModuleEntity)\n   private readonly emailModuleReq: Repository<EmailModuleEntity>,\n   @InjectRepository(EmailConfigureEntity)\n   private readonly emailConfigRep: Repository<EmailConfigureEntity>,\n   @InjectRepository(EmailLogEntity)\n   private readonly emailLogRep: Repository<EmailLogEntity>,\n ) {}\n\n  /**\n   * 发送邮箱\n   * @param {EmailModuleEntity} emailModule 邮箱模板\n   * @param {any} mContent 邮箱模板\n   * @param {email[]} emailUser 收信人地址\n   * @param {string} sender 发信人\n   * @returns {Promise<{code: number; message: string}>}\n   */\n  async sendEmail(mContent: any, mid: number, email: [string], sender: string, emailConfigId: number): Promise<{code, message }> {\n    const emailModule: EmailModuleEntity | undefined = await this.emailModuleReq.findOne(mid);\n    if (!emailModule) {\n      throw new HttpException(\"发送邮箱模板不存在\", 406);\n    }\n    if (email.length <= 0) {\n      throw new HttpException(\"收件人不存在\", 406);\n    }\n    const emailConfig: EmailConfigureEntity | undefined = await this.emailConfigRep.findOne(emailConfigId);\n    if (emailConfig === undefined) {\n      return {code: 400, message: \"短信配置文件不存在\"};\n    }\n    // 可参考 https://help.aliyun.com/document_detail/29456.html?spm=a2c4g.11186623.6.606.uvABcP\n    for (let i = 0; i < email.length; i++) {\n      const str = `${emailModule.module}`;\n      // ejs 模板渲染工具，data为参数，str为模板\n      const template = render(str, mContent);\n      const mailOptions = {\n        // 发送人地址必须与服务器连接配置中的auth中的user属性相同\n        from: `${sender}` + `${emailConfig.fromAddress}`,\n        // 收件人地址\n        to: email[i],\n        // 邮件主题\n        subject: `${emailModule.emailTheme}`,\n        // 邮件内容\n        html: `${template}`,\n      };\n      const emailLog: EmailLogEntity | undefined = new EmailLogEntity();\n     try {\n       // 服务器连接配置\n       const a = await createTransport({\n         // 邮箱服务器，这里是阿里云服务器\n         host: emailConfig.hostAddress,\n         port: 465,\n         auth: {\n           user: emailConfig.authUser,\n           pass: emailConfig.authPass,\n         },\n       }).sendMail(mailOptions);\n       code = 200;\n       message = \"发送成功\";\n       emailLog.code = code;\n       emailLog.message = message;\n       emailLog.emailModuleId = mid;\n       emailLog.email = email[i];\n       await this.emailLogRep.save(emailLog);\n       return {code, message};\n     } catch (error) {\n       code = 500;\n       message = error.message;\n       emailLog.code = code;\n       emailLog.message = message;\n       emailLog.emailModuleId = mid;\n       emailLog.email = email[i];\n       await this.emailLogRep.save(emailLog);\n       console.log(error);\n       return {code, message};\n     }\n    }\n  }\n\n  /**\n   * 添加短信模板\n   * @param {EmailModuleEntity} emailModule\n   * @returns {Promise<{code; message}>}\n   */\n  async createEmailModule(emailModule: EmailModuleEntity): Promise<{code, message }> {\n    try {\n      await this.emailModuleReq.save(emailModule);\n      return {code: 200, message: \"添加成功\"};\n    } catch (error) {\n      return {code: 406, message: \"添加失败，错误原因：\" + error.toString()};\n    }\n  }\n}\n"]}