{"version":3,"sources":["../src/export/email.component.provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,4DAAwD;AACxD,2CAAoD;AAGpD,IAAa,sBAAsB,GAAnC;IACG,YAEmB,WAAyB;QAAzB,gBAAW,GAAX,WAAW,CAAc;IACzC,CAAC;IASE,SAAS,CAAC,QAAa,EAAE,GAAW,EAAE,KAAe,EAAE,MAAc,EAAE,aAAqB;;YAChG,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;QACjF,CAAC;KAAA;CACH,CAAA;AAhBY,sBAAsB;IADlC,mBAAU,EAAE;IAGP,WAAA,eAAM,CAAC,4BAAY,CAAC,CAAA;qCACS,4BAAY;GAHlC,sBAAsB,CAgBlC;AAhBY,wDAAsB","file":"email.component.provider.js","sourcesContent":["import { EmailService } from \"../service/email.service\";\nimport { Inject, Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class EmailComponentProvider {\n   constructor(\n     @Inject(EmailService)\n     private readonly emailSerice: EmailService,\n   ) {}\n\n  /**\n   * 发送邮箱\n   * @param {number} mid 模板Id\n   * @param {[number]} uid 用户Id\n   * @param {string} sender 邮件主题\n   * @returns {Promise<{code; message}>}\n   */\n   async sendEmail(mContent: any, mid: number, email: [string], sender: string, emailConfigId: number) {\n     return this.emailSerice.sendEmail(mContent, mid, email, sender, emailConfigId);\n   }\n}\n"]}